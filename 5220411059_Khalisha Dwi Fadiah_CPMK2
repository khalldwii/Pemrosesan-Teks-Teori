{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2o7U24rJ_BOX",
        "outputId": "fc73674f-aafb-4a88-9029-079cddae9386",
        "collapsed": true
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: requests in /usr/local/lib/python3.12/dist-packages (2.32.4)\n",
            "Requirement already satisfied: beautifulsoup4 in /usr/local/lib/python3.12/dist-packages (4.13.5)\n",
            "Requirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.12/dist-packages (from requests) (3.4.3)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.12/dist-packages (from requests) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.12/dist-packages (from requests) (2.5.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.12/dist-packages (from requests) (2025.8.3)\n",
            "Requirement already satisfied: soupsieve>1.2 in /usr/local/lib/python3.12/dist-packages (from beautifulsoup4) (2.8)\n",
            "Requirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.12/dist-packages (from beautifulsoup4) (4.15.0)\n"
          ]
        }
      ],
      "source": [
        "# download library requests dan beautifulsoup\n",
        "!pip install requests beautifulsoup4"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# download library selenium\n",
        "!pip install selenium\n",
        "\n",
        "# download library webdriver\n",
        "!pip install webdriver-manager"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oOzPPP3cAe_o",
        "outputId": "0ccd9a9f-e2c3-44ae-99aa-76c53ff4ce78",
        "collapsed": true
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: selenium in /usr/local/lib/python3.12/dist-packages (4.36.0)\n",
            "Requirement already satisfied: urllib3<3.0,>=2.5.0 in /usr/local/lib/python3.12/dist-packages (from urllib3[socks]<3.0,>=2.5.0->selenium) (2.5.0)\n",
            "Requirement already satisfied: trio<1.0,>=0.30.0 in /usr/local/lib/python3.12/dist-packages (from selenium) (0.31.0)\n",
            "Requirement already satisfied: trio-websocket<1.0,>=0.12.2 in /usr/local/lib/python3.12/dist-packages (from selenium) (0.12.2)\n",
            "Requirement already satisfied: certifi>=2025.6.15 in /usr/local/lib/python3.12/dist-packages (from selenium) (2025.8.3)\n",
            "Requirement already satisfied: typing_extensions<5.0,>=4.14.0 in /usr/local/lib/python3.12/dist-packages (from selenium) (4.15.0)\n",
            "Requirement already satisfied: websocket-client<2.0,>=1.8.0 in /usr/local/lib/python3.12/dist-packages (from selenium) (1.8.0)\n",
            "Requirement already satisfied: attrs>=23.2.0 in /usr/local/lib/python3.12/dist-packages (from trio<1.0,>=0.30.0->selenium) (25.3.0)\n",
            "Requirement already satisfied: sortedcontainers in /usr/local/lib/python3.12/dist-packages (from trio<1.0,>=0.30.0->selenium) (2.4.0)\n",
            "Requirement already satisfied: idna in /usr/local/lib/python3.12/dist-packages (from trio<1.0,>=0.30.0->selenium) (3.10)\n",
            "Requirement already satisfied: outcome in /usr/local/lib/python3.12/dist-packages (from trio<1.0,>=0.30.0->selenium) (1.3.0.post0)\n",
            "Requirement already satisfied: sniffio>=1.3.0 in /usr/local/lib/python3.12/dist-packages (from trio<1.0,>=0.30.0->selenium) (1.3.1)\n",
            "Requirement already satisfied: wsproto>=0.14 in /usr/local/lib/python3.12/dist-packages (from trio-websocket<1.0,>=0.12.2->selenium) (1.2.0)\n",
            "Requirement already satisfied: pysocks!=1.5.7,<2.0,>=1.5.6 in /usr/local/lib/python3.12/dist-packages (from urllib3[socks]<3.0,>=2.5.0->selenium) (1.7.1)\n",
            "Requirement already satisfied: h11<1,>=0.9.0 in /usr/local/lib/python3.12/dist-packages (from wsproto>=0.14->trio-websocket<1.0,>=0.12.2->selenium) (0.16.0)\n",
            "Requirement already satisfied: webdriver-manager in /usr/local/lib/python3.12/dist-packages (4.0.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.12/dist-packages (from webdriver-manager) (2.32.4)\n",
            "Requirement already satisfied: python-dotenv in /usr/local/lib/python3.12/dist-packages (from webdriver-manager) (1.1.1)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.12/dist-packages (from webdriver-manager) (25.0)\n",
            "Requirement already satisfied: charset_normalizer<4,>=2 in /usr/local/lib/python3.12/dist-packages (from requests->webdriver-manager) (3.4.3)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.12/dist-packages (from requests->webdriver-manager) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.12/dist-packages (from requests->webdriver-manager) (2.5.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.12/dist-packages (from requests->webdriver-manager) (2025.8.3)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# download paket instalasi Google Chrome\n",
        "!wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\n",
        "\n",
        "# install paket tersebut (bersama dengan dependensi yang dibutuhkan)\n",
        "!sudo apt-get update\n",
        "!sudo apt-get install -y ./google-chrome-stable_current_amd64.deb"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9XkMp2AwFWlT",
        "outputId": "a60bd5e2-eb67-4b87-fc88-6706610e95c6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2025-10-09 13:13:56--  https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\n",
            "Resolving dl.google.com (dl.google.com)... 173.194.212.91, 173.194.212.190, 173.194.212.93, ...\n",
            "Connecting to dl.google.com (dl.google.com)|173.194.212.91|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 120562424 (115M) [application/x-debian-package]\n",
            "Saving to: ‘google-chrome-stable_current_amd64.deb.1’\n",
            "\n",
            "google-chrome-stabl 100%[===================>] 114.98M   348MB/s    in 0.3s    \n",
            "\n",
            "2025-10-09 13:13:56 (348 MB/s) - ‘google-chrome-stable_current_amd64.deb.1’ saved [120562424/120562424]\n",
            "\n",
            "Get:1 https://dl.google.com/linux/chrome/deb stable InRelease [1,825 B]\n",
            "Hit:2 https://cloud.r-project.org/bin/linux/ubuntu jammy-cran40/ InRelease\n",
            "Hit:3 https://cli.github.com/packages stable InRelease\n",
            "Hit:4 http://security.ubuntu.com/ubuntu jammy-security InRelease\n",
            "Hit:5 https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64  InRelease\n",
            "Hit:6 https://r2u.stat.illinois.edu/ubuntu jammy InRelease\n",
            "Hit:7 http://archive.ubuntu.com/ubuntu jammy InRelease\n",
            "Get:8 https://dl.google.com/linux/chrome/deb stable/main amd64 Packages [1,211 B]\n",
            "Hit:9 http://archive.ubuntu.com/ubuntu jammy-updates InRelease\n",
            "Hit:10 http://archive.ubuntu.com/ubuntu jammy-backports InRelease\n",
            "Hit:11 https://ppa.launchpadcontent.net/deadsnakes/ppa/ubuntu jammy InRelease\n",
            "Hit:12 https://ppa.launchpadcontent.net/graphics-drivers/ppa/ubuntu jammy InRelease\n",
            "Hit:13 https://ppa.launchpadcontent.net/ubuntugis/ppa/ubuntu jammy InRelease\n",
            "Fetched 3,036 B in 3s (1,008 B/s)\n",
            "Reading package lists... Done\n",
            "W: Skipping acquire of configured file 'main/source/Sources' as repository 'https://r2u.stat.illinois.edu/ubuntu jammy InRelease' does not seem to provide it (sources.list entry misspelt?)\n",
            "Reading package lists... Done\n",
            "Building dependency tree... Done\n",
            "Reading state information... Done\n",
            "Note, selecting 'google-chrome-stable' instead of './google-chrome-stable_current_amd64.deb'\n",
            "google-chrome-stable is already the newest version (141.0.7390.65-1).\n",
            "0 upgraded, 0 newly installed, 0 to remove and 42 not upgraded.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import time\n",
        "import pandas as pd\n",
        "from selenium import webdriver\n",
        "from selenium.webdriver.chrome.service import Service\n",
        "from selenium.webdriver.chrome.options import Options\n",
        "from webdriver_manager.chrome import ChromeDriverManager\n",
        "from selenium.webdriver.common.by import By\n",
        "from selenium.webdriver.support.ui import WebDriverWait\n",
        "from selenium.webdriver.support import expected_conditions as EC\n",
        "from selenium.common.exceptions import TimeoutException\n",
        "\n",
        "driver = None\n",
        "\n",
        "list_nama = []\n",
        "list_ulasan = []\n",
        "\n",
        "try:\n",
        "    chrome_options = Options()\n",
        "    profile_path = f\"/tmp/chrome-profile-{int(time.time())}\"\n",
        "    chrome_options.add_argument(f\"--user-data-dir={profile_path}\")\n",
        "    chrome_options.add_argument(\"--headless\")\n",
        "    chrome_options.add_argument(\"--no-sandbox\")\n",
        "    chrome_options.add_argument(\"--disable-dev-shm-usage\")\n",
        "\n",
        "    service = Service(ChromeDriverManager().install())\n",
        "    driver = webdriver.Chrome(service=service, options=chrome_options)\n",
        "\n",
        "    url = 'https://maps.app.goo.gl/CA4i4vu1MpATGoYm6'\n",
        "    driver.get(url)\n",
        "    print(\"Berhasil membuka halaman. Mencari data...\")\n",
        "\n",
        "    wait = WebDriverWait(driver, 20)\n",
        "\n",
        "    # 1. Temukan panel yang bisa di-scroll terlebih dahulu\n",
        "    # GANTI 'm6QErb' dengan class name panel scroll yang benar\n",
        "    scrollable_pane = wait.until(\n",
        "        EC.presence_of_element_located((By.CLASS_NAME, \"m6QErb\"))\n",
        "    )\n",
        "\n",
        "    # 2. Lakukan scroll di dalam panel tersebut\n",
        "    print(\"Memulai proses scroll di dalam panel...\")\n",
        "    for i in range(10): # Scroll 10 kali untuk dapat banyak data\n",
        "        # Argumen[0] merujuk pada elemen 'scrollable_pane'\n",
        "        driver.execute_script(\"arguments[0].scrollTop = arguments[0].scrollHeight\", scrollable_pane)\n",
        "        print(f\"Scrolling ke-{i+1}...\")\n",
        "        time.sleep(3) # Beri waktu untuk data baru dimuat\n",
        "\n",
        "    # # Scroll ke bawah beberapa kali untuk memuat lebih banyak ulasan\n",
        "    # print(\"Melakukan scroll untuk memuat ulasan...\")\n",
        "    # for i in range(5):\n",
        "    #     driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\n",
        "    #     # print(f\"Scrolling ke-{i+1}...\")\n",
        "    #     time.sleep(4)\n",
        "\n",
        "    try:\n",
        "        rating_element = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, \"span.ceNzKf[aria-label]\")))\n",
        "        aria_text = rating_element.get_attribute(\"aria-label\")\n",
        "        average_rating = aria_text.split(' ')[0].replace(',', '.')\n",
        "        print(f\"⭐ Rating Rata-rata: {average_rating}\")\n",
        "    except TimeoutException:\n",
        "        print(\"❌ Rating rata-rata tidak ditemukan.\")\n",
        "\n",
        "    try:\n",
        "        review_blocks = wait.until(EC.presence_of_all_elements_located((By.CLASS_NAME, \"jftiEf\")))\n",
        "        print(f\"✅ Berhasil menemukan {len(review_blocks)} blok ulasan.\")\n",
        "\n",
        "        # melakukan loop untuk setiap blok ulasan\n",
        "        for block in review_blocks:\n",
        "            # mengambil nama pengguna dari dalam blok\n",
        "            try:\n",
        "                nama_pengguna = block.find_element(By.CLASS_NAME, \"d4r55\").text\n",
        "            except:\n",
        "                nama_pengguna = \"N/A\"\n",
        "\n",
        "            # mengambil isi ulasan dari dalam blok\n",
        "            try:\n",
        "                isi_ulasan = block.find_element(By.CLASS_NAME, \"wiI7pd\").text\n",
        "            except:\n",
        "                isi_ulasan = \"\"\n",
        "\n",
        "            # masukkan data ke dalam list\n",
        "            list_nama.append(nama_pengguna)\n",
        "            list_ulasan.append(isi_ulasan)\n",
        "\n",
        "    except TimeoutException:\n",
        "        print(\"❌ Tidak ada blok ulasan yang ditemukan.\")\n",
        "\n",
        "except Exception as e:\n",
        "    print(f\"Terjadi kesalahan yang tidak terduga: {e}\")\n",
        "\n",
        "finally:\n",
        "    if driver:\n",
        "        print(\"\\nMenutup browser...\")\n",
        "        driver.quit()\n",
        "\n",
        "# DataFrame jika list tidak kosong\n",
        "if list_nama:\n",
        "    print(\"\\nMembuat DataFrame...\")\n",
        "    df = pd.DataFrame({\n",
        "        'Nama Pengguna': list_nama,\n",
        "        'Isi Ulasan': list_ulasan\n",
        "    })\n",
        "    print(df)\n",
        "else:\n",
        "    print(\"\\nTidak ada data ulasan untuk dibuatkan DataFrame.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VOR6uS8CMeWo",
        "outputId": "026acac2-198d-4602-d387-fcc6df111c00"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Berhasil membuka halaman. Mencari data...\n",
            "Memulai proses scroll di dalam panel...\n",
            "Scrolling ke-1...\n",
            "Scrolling ke-2...\n",
            "Scrolling ke-3...\n",
            "Scrolling ke-4...\n",
            "Scrolling ke-5...\n",
            "Scrolling ke-6...\n",
            "Scrolling ke-7...\n",
            "Scrolling ke-8...\n",
            "Scrolling ke-9...\n",
            "Scrolling ke-10...\n",
            "⭐ Rating Rata-rata: 4.4\n",
            "✅ Berhasil menemukan 3 blok ulasan.\n",
            "\n",
            "Menutup browser...\n",
            "\n",
            "Membuat DataFrame...\n",
            "   Nama Pengguna                                         Isi Ulasan\n",
            "0  Sigit Dewanto          Nasi lemak is delicious. Coffee are good.\n",
            "1     Brian Tjoe  All over it’s were a beautiful places to hango...\n",
            "2  octavia nadia                                          Best ever\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import time\n",
        "import pandas as pd\n",
        "from selenium import webdriver\n",
        "from selenium.webdriver.chrome.service import Service\n",
        "from selenium.webdriver.chrome.options import Options\n",
        "from webdriver_manager.chrome import ChromeDriverManager\n",
        "from selenium.webdriver.common.by import By\n",
        "from selenium.webdriver.support.ui import WebDriverWait\n",
        "from selenium.webdriver.support import expected_conditions as EC\n",
        "from selenium.common.exceptions import TimeoutException\n",
        "\n",
        "driver = None\n",
        "\n",
        "list_nama = []\n",
        "list_ulasan = []\n",
        "\n",
        "try:\n",
        "    chrome_options = Options()\n",
        "    profile_path = f\"/tmp/chrome-profile-{int(time.time())}\"\n",
        "    chrome_options.add_argument(f\"--user-data-dir={profile_path}\")\n",
        "    chrome_options.add_argument(\"--headless\")\n",
        "    chrome_options.add_argument(\"--no-sandbox\")\n",
        "    chrome_options.add_argument(\"--disable-dev-shm-usage\")\n",
        "\n",
        "    service = Service(ChromeDriverManager().install())\n",
        "    driver = webdriver.Chrome(service=service, options=chrome_options)\n",
        "\n",
        "    url = 'https://maps.app.goo.gl/CA4i4vu1MpATGoYm6'\n",
        "    driver.get(url)\n",
        "    print(\"Berhasil membuka halaman. Mencari data...\")\n",
        "\n",
        "    wait = WebDriverWait(driver, 20)\n",
        "\n",
        "    # 1. Temukan panel yang bisa di-scroll terlebih dahulu\n",
        "    # GANTI 'm6QErb' dengan class name panel scroll yang benar\n",
        "    scrollable_pane = wait.until(\n",
        "        EC.presence_of_element_located((By.CLASS_NAME, \"m6QErb\"))\n",
        "    )\n",
        "\n",
        "    # 2. Lakukan scroll di dalam panel tersebut\n",
        "    print(\"Memulai proses scroll di dalam panel...\")\n",
        "    for i in range(10): # Scroll 10 kali untuk dapat banyak data\n",
        "        # Argumen[0] merujuk pada elemen 'scrollable_pane'\n",
        "        driver.execute_script(\"arguments[0].scrollTop = arguments[0].scrollHeight\", scrollable_pane)\n",
        "        print(f\"Scrolling ke-{i+1}...\")\n",
        "        time.sleep(3) # Beri waktu untuk data baru dimuat\n",
        "\n",
        "    # # Scroll ke bawah beberapa kali untuk memuat lebih banyak ulasan\n",
        "    # print(\"Melakukan scroll untuk memuat ulasan...\")\n",
        "    # for i in range(5):\n",
        "    #     driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\n",
        "    #     # print(f\"Scrolling ke-{i+1}...\")\n",
        "    #     time.sleep(4)\n",
        "\n",
        "    try:\n",
        "        rating_element = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, \"span.ceNzKf[aria-label]\")))\n",
        "        aria_text = rating_element.get_attribute(\"aria-label\")\n",
        "        average_rating = aria_text.split(' ')[0].replace(',', '.')\n",
        "        print(f\"⭐ Rating Rata-rata: {average_rating}\")\n",
        "    except TimeoutException:\n",
        "        print(\"❌ Rating rata-rata tidak ditemukan.\")\n",
        "\n",
        "    try:\n",
        "        review_blocks = wait.until(EC.presence_of_all_elements_located((By.CLASS_NAME, \"jftiEf\")))\n",
        "        print(f\"✅ Berhasil menemukan {len(review_blocks)} blok ulasan.\")\n",
        "\n",
        "        # melakukan loop untuk setiap blok ulasan\n",
        "        for block in review_blocks:\n",
        "            # mengambil nama pengguna dari dalam blok\n",
        "            try:\n",
        "                nama_pengguna = block.find_element(By.CLASS_NAME, \"d4r55\").text\n",
        "            except:\n",
        "                nama_pengguna = \"N/A\"\n",
        "\n",
        "            # mengambil isi ulasan dari dalam blok\n",
        "            try:\n",
        "                isi_ulasan = block.find_element(By.CLASS_NAME, \"wiI7pd\").text.lower()\n",
        "            except:\n",
        "                isi_ulasan = \"\"\n",
        "\n",
        "            # masukkan data ke dalam list\n",
        "            list_nama.append(nama_pengguna)\n",
        "            list_ulasan.append(isi_ulasan)\n",
        "\n",
        "    except TimeoutException:\n",
        "        print(\"❌ Tidak ada blok ulasan yang ditemukan.\")\n",
        "\n",
        "except Exception as e:\n",
        "    print(f\"Terjadi kesalahan yang tidak terduga: {e}\")\n",
        "\n",
        "finally:\n",
        "    if driver:\n",
        "        print(\"\\nMenutup browser...\")\n",
        "        driver.quit()\n",
        "\n",
        "# DataFrame jika list tidak kosong\n",
        "if list_nama:\n",
        "    print(\"\\nMembuat DataFrame...\")\n",
        "    df = pd.DataFrame({\n",
        "        'Nama Pengguna': list_nama,\n",
        "        'Isi Ulasan': list_ulasan\n",
        "    })\n",
        "    print(df)\n",
        "else:\n",
        "    print(\"\\nTidak ada data ulasan untuk dibuatkan DataFrame.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J9-P2GNWtc0K",
        "outputId": "ddca0f99-e336-4a36-a2fe-38cc0be51d9f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Berhasil membuka halaman. Mencari data...\n",
            "Memulai proses scroll di dalam panel...\n",
            "Scrolling ke-1...\n",
            "Scrolling ke-2...\n",
            "Scrolling ke-3...\n",
            "Scrolling ke-4...\n",
            "Scrolling ke-5...\n",
            "Scrolling ke-6...\n",
            "Scrolling ke-7...\n",
            "Scrolling ke-8...\n",
            "Scrolling ke-9...\n",
            "Scrolling ke-10...\n",
            "⭐ Rating Rata-rata: 4.4\n",
            "✅ Berhasil menemukan 3 blok ulasan.\n",
            "\n",
            "Menutup browser...\n",
            "\n",
            "Membuat DataFrame...\n",
            "   Nama Pengguna                                         Isi Ulasan\n",
            "0  Sigit Dewanto          nasi lemak is delicious. coffee are good.\n",
            "1     Brian Tjoe  all over it’s were a beautiful places to hango...\n",
            "2  octavia nadia                                          best ever\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Bp4TYyCor-mY"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
